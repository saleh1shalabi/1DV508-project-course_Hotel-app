/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'checkstyle'
    id "com.github.spotbugs" version "4.6.0"
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

javafx {
    version = "16"
    modules = [ 'javafx.controls' ]
}

spotbugsMain {
    ignoreFailures = true   // failures are handled via automatic testing
    showStackTraces = false
    excludeFilter = file("${rootDir}/config/findbugs/exclude_filter.xml")
    reports {
        html {
            enabled = false
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            //stylesheet = 'fancy-hist.xsl'
        }
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugs.xml")
        }
    }
}

// we dont wan't to run the spotbugs on the unit tests
spotbugsTest {
    ignoreFailures = false
    showStackTraces = false
    enabled = false
}

checkstyle {
    // assign the latest checkstyle version explicitly
    // default version is very old, likes 5.9
    toolVersion = '8.6'
    // checkstyle.xml copy from:
    // https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-8.6/src/main/resources/google_checks.xml
    // the version should be as same as plugin version
    // configFile = rootProject.file('config/checkstyle/google_checks.xml')    // you can of course change this to something else
    configFile = file("${rootDir}/config/checkstyle/google_checks.xml")
    sourceSets = [] // remove from default build only explicit calls ig.e. gradlew checkStyleMain
}

test {
    // make sure we run the code quality stuff first
    // we need the generated reports when testing
    dependsOn checkstyleMain
    dependsOn spotbugsMain

    // also some verbose output so we get some info in the console when we run tests
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'

    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '4.0.3'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-nop
    implementation group: 'org.slf4j', name: 'slf4j-nop', version: '2.0.0-alpha1'

    //https://search.maven.org/artifact/com.github.stephenc.simple-java-mail/simple-java-mail/1.8/jar
    implementation 'com.github.stephenc.simple-java-mail:simple-java-mail:1.8'

    // https://mvnrepository.com/artifact/javax.activation/activation
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'

}

application {
    // Define the main class for the application.
    mainClass = 'hotelproject.App'
}

run {
    standardInput = System.in
}

group 'se.lnu.oop'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8